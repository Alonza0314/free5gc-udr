/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (s://openapi-generator.tech)
 */

package sbi

import (
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
)

func (s *Server) getDataRepositoryRoutes() []Route {
	return []Route{
		{
			"Index",
			"GET",
			"/",
			Index,
		},
	
		{
			"AmfContext3gpp",
			strings.ToUpper("Patch"),
			"/subscription-data/:ueId/:servingPlmnId/amf-3gpp-access",
			s.Processor().HandleAmfContext3gpp,
		},
	
		{
			"CreateAmfContext3gpp",
			strings.ToUpper("Put"),
			"/subscription-data/:ueId/:servingPlmnId/amf-3gpp-access",
			s.Processor().HandleCreateAmfContext3gpp,
		},
	
		{
			"QueryAmfContext3gpp",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/amf-3gpp-access",
			s.Processor().HandleQueryAmfContext3gpp,
		},
	
		{
			"AmfContextNon3gpp",
			strings.ToUpper("Patch"),
			"/subscription-data/:ueId/:servingPlmnId/amf-non-3gpp-access",
			s.Processor().HandleAmfContextNon3gpp,
		},
	
		{
			"CreateAmfContextNon3gpp",
			strings.ToUpper("Put"),
			"/subscription-data/:ueId/:servingPlmnId/amf-non-3gpp-access",
			s.Processor().HandleCreateAmfContextNon3gpp,
		},
	
		{
			"QueryAmfContextNon3gpp",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/amf-non-3gpp-access",
			s.Processor().HandleQueryAmfContextNon3gpp,
		},
	
		{
			"QueryAmData",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/provisioned-data/am-data",
			s.Processor().HandleQueryAmData,
		},
	
		{
			"QueryAuthenticationStatus",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/authentication-status",
			s.Processor().HandleQueryAuthenticationStatus,
		},
	
		{
			"ModifyAuthentication",
			strings.ToUpper("Patch"),
			"/subscription-data/:ueId/:servingPlmnId/authentication-subscription",
			s.Processor().HandleModifyAuthentication,
		},
	
		{
			"QueryAuthSubsData",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/authentication-subscription",
			s.Processor().HandleQueryAuthSubsData,
		},
	
		{
			"CreateAuthenticationSoR",
			strings.ToUpper("Put"),
			"/subscription-data/:ueId/:servingPlmnId/sor-data",
			s.Processor().HandleCreateAuthenticationSoR,
		},
	
		{
			"QueryAuthSoR",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/sor-data",
			s.Processor().HandleQueryAuthSoR,
		},
	
		{
			"CreateAuthenticationStatus",
			strings.ToUpper("Put"),
			"/subscription-data/:ueId/:servingPlmnId/authentication-status",
			s.Processor().HandleCreateAuthenticationStatus,
		},
	
		{
			"ApplicationDataInfluenceDataGet",
			strings.ToUpper("Get"),
			"/application-data/influenceData",
			s.Processor().HandleApplicationDataInfluenceDataGet,
		},
	
		/*
		 * GIN wildcard issue:
		 * '/application-data/influenceData/:influenceId' and
		 * '/application-data/influenceData/subs-to-notify' patterns will be conflicted.
		 * Only can use '/application-data/influenceData/:influenceId' pattern.
		 * Here ":influenceId" value should be "subs-to-notify".
		 */
		{
			"ApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete",
			strings.ToUpper("Delete"),
			"/application-data/influenceData/:influenceId/:subscriptionId",
			s.Processor().HandleApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete,
			// ApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete,
		},
	
		{
			"ApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet",
			strings.ToUpper("Get"),
			"/application-data/influenceData/:influenceId/:subscriptionId",
			s.Processor().HandleApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet,
			// ApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet,
		},
	
		{
			"ApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut",
			strings.ToUpper("Put"),
			"/application-data/influenceData/:influenceId/:subscriptionId",
			s.Processor().HandleApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut,
			// ApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut,
		},
	
		{
			"ApplicationDataPfdsAppIdDelete",
			strings.ToUpper("Delete"),
			"/application-data/pfds/:appId",
			s.Processor().HandleApplicationDataPfdsAppIdDelete,
		},
	
		{
			"ApplicationDataPfdsAppIdGet",
			strings.ToUpper("Get"),
			"/application-data/pfds/:appId",
			s.Processor().HandleApplicationDataPfdsAppIdGet,
		},
	
		{
			"ApplicationDataPfdsAppIdPut",
			strings.ToUpper("Put"),
			"/application-data/pfds/:appId",
			s.Processor().HandleApplicationDataPfdsAppIdPut,
		},
	
		{
			"ApplicationDataPfdsGet",
			strings.ToUpper("Get"),
			"/application-data/pfds",
			s.Processor().HandleApplicationDataPfdsGet,
		},
	
		{
			"PolicyDataBdtDataBdtReferenceIdDelete",
			strings.ToUpper("Delete"),
			"/policy-data/bdt-data/:bdtReferenceId",
			s.Processor().HandlePolicyDataBdtDataBdtReferenceIdDelete,
		},
	
		{
			"PolicyDataBdtDataBdtReferenceIdGet",
			strings.ToUpper("Get"),
			"/policy-data/bdt-data/:bdtReferenceId",
			s.Processor().HandlePolicyDataBdtDataBdtReferenceIdGet,
		},
	
		{
			"PolicyDataBdtDataBdtReferenceIdPut",
			strings.ToUpper("Put"),
			"/policy-data/bdt-data/:bdtReferenceId",
			s.Processor().HandlePolicyDataBdtDataBdtReferenceIdPut,
		},
	
		{
			"PolicyDataBdtDataGet",
			strings.ToUpper("Get"),
			"/policy-data/bdt-data",
			s.Processor().HandlePolicyDataBdtDataGet,
		},
	
		{
			"PolicyDataPlmnsPlmnIdUePolicySetGet",
			strings.ToUpper("Get"),
			"/policy-data/plmns/:plmnId/ue-policy-set",
			s.Processor().HandlePolicyDataPlmnsPlmnIdUePolicySetGet,
		},
	
		{
			"PolicyDataSponsorConnectivityDataSponsorIdGet",
			strings.ToUpper("Get"),
			"/policy-data/sponsor-connectivity-data/:sponsorId",
			s.Processor().HandlePolicyDataSponsorConnectivityDataSponsorIdGet,
		},
	
		{
			"PolicyDataSubsToNotifyPost",
			strings.ToUpper("Post"),
			"/policy-data/subs-to-notify",
			s.Processor().HandlePolicyDataSubsToNotifyPost,
		},
	
		{
			"PolicyDataSubsToNotifySubsIdDelete",
			strings.ToUpper("Delete"),
			"/policy-data/subs-to-notify/:subsId",
			s.Processor().HandlePolicyDataSubsToNotifySubsIdDelete,
		},
	
		{
			"PolicyDataSubsToNotifySubsIdPut",
			strings.ToUpper("Put"),
			"/policy-data/subs-to-notify/:subsId",
			s.Processor().HandlePolicyDataSubsToNotifySubsIdPut,
		},
	
		{
			"PolicyDataUesUeIdAmDataGet",
			strings.ToUpper("Get"),
			"/policy-data/ues/:ueId/am-data",
			s.Processor().HandlePolicyDataUesUeIdAmDataGet,
		},
	
		{
			"PolicyDataUesUeIdOperatorSpecificDataGet",
			strings.ToUpper("Get"),
			"/policy-data/ues/:ueId/operator-specific-data",
			s.Processor().HandlePolicyDataUesUeIdOperatorSpecificDataGet,
		},
	
		{
			"PolicyDataUesUeIdOperatorSpecificDataPatch",
			strings.ToUpper("Patch"),
			"/policy-data/ues/:ueId/operator-specific-data",
			s.Processor().HandlePolicyDataUesUeIdOperatorSpecificDataPatch,
		},
	
		{
			"PolicyDataUesUeIdOperatorSpecificDataPut",
			strings.ToUpper("Put"),
			"/policy-data/ues/:ueId/operator-specific-data",
			s.Processor().HandlePolicyDataUesUeIdOperatorSpecificDataPut,
		},
	
		{
			"PolicyDataUesUeIdSmDataGet",
			strings.ToUpper("Get"),
			"/policy-data/ues/:ueId/sm-data",
			s.Processor().HandlePolicyDataUesUeIdSmDataGet,
		},
	
		{
			"PolicyDataUesUeIdSmDataPatch",
			strings.ToUpper("Patch"),
			"/policy-data/ues/:ueId/sm-data",
			s.Processor().HandlePolicyDataUesUeIdSmDataPatch,
		},
	
		{
			"PolicyDataUesUeIdSmDataUsageMonIdDelete",
			strings.ToUpper("Delete"),
			"/policy-data/ues/:ueId/sm-data/:usageMonId",
			s.Processor().HandlePolicyDataUesUeIdSmDataUsageMonIdDelete,
		},
	
		{
			"PolicyDataUesUeIdSmDataUsageMonIdGet",
			strings.ToUpper("Get"),
			"/policy-data/ues/:ueId/sm-data/:usageMonId",
			s.Processor().HandlePolicyDataUesUeIdSmDataUsageMonIdGet,
		},
	
		{
			"PolicyDataUesUeIdSmDataUsageMonIdPut",
			strings.ToUpper("Put"),
			"/policy-data/ues/:ueId/sm-data/:usageMonId",
			s.Processor().HandlePolicyDataUesUeIdSmDataUsageMonIdPut,
		},
	
		{
			"PolicyDataUesUeIdUePolicySetGet",
			strings.ToUpper("Get"),
			"/policy-data/ues/:ueId/ue-policy-set",
			s.Processor().HandlePolicyDataUesUeIdUePolicySetGet,
		},
	
		{
			"PolicyDataUesUeIdUePolicySetPatch",
			strings.ToUpper("Patch"),
			"/policy-data/ues/:ueId/ue-policy-set",
			s.Processor().HandlePolicyDataUesUeIdUePolicySetPatch,
		},
	
		{
			"PolicyDataUesUeIdUePolicySetPut",
			strings.ToUpper("Put"),
			"/policy-data/ues/:ueId/ue-policy-set",
			s.Processor().HandlePolicyDataUesUeIdUePolicySetPut,
		},
	
		{
			"QueryProvisionedData",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/provisioned-data",
			s.Processor().HandleQueryProvisionedData,
		},
	
		{
			"RemovesdmSubscriptions",
			strings.ToUpper("Delete"),
			"/subscription-data/:ueId/:servingPlmnId/sdm-subscriptions/:subsId",
			s.Processor().HandleRemovesdmSubscriptions,
		},
	
		{
			"Updatesdmsubscriptions",
			strings.ToUpper("Put"),
			"/subscription-data/:ueId/:servingPlmnId/sdm-subscriptions/:subsId",
			s.Processor().HandleUpdatesdmsubscriptions,
		},
	
		{
			"CreateSdmSubscriptions",
			strings.ToUpper("Post"),
			"/subscription-data/:ueId/:servingPlmnId/sdm-subscriptions",
			s.Processor().HandleCreateSdmSubscriptions,
		},
	
		{
			"Querysdmsubscriptions",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/sdm-subscriptions",
			s.Processor().HandleQuerysdmsubscriptions,
		},
	
		{
			"CreateSmfContextNon3gpp",
			strings.ToUpper("Put"),
			"/subscription-data/:ueId/:servingPlmnId/smf-registrations/:pduSessionId",
			s.Processor().HandleCreateSmfContextNon3gpp,
		},
	
		{
			"DeleteSmfContext",
			strings.ToUpper("Delete"),
			"/subscription-data/:ueId/:servingPlmnId/smf-registrations/:pduSessionId",
			s.Processor().HandleDeleteSmfContext,
		},
	
		{
			"QuerySmfRegistration",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/smf-registrations/:pduSessionId",
			s.Processor().HandleQuerySmfRegistration,
		},
	
		{
			"QuerySmfRegList",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/smf-registrations",
			s.Processor().HandleQuerySmfRegList,
		},
	
		{
			"QuerySmfSelectData",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/provisioned-data/smf-selection-subscription-data",
			s.Processor().HandleQuerySmfSelectData,
		},
	
		{
			"CreateSmsfContext3gpp",
			strings.ToUpper("Put"),
			"/subscription-data/:ueId/:servingPlmnId/smsf-3gpp-access",
			s.Processor().HandleCreateSmsfContext3gpp,
		},
	
		{
			"DeleteSmsfContext3gpp",
			strings.ToUpper("Delete"),
			"/subscription-data/:ueId/:servingPlmnId/smsf-3gpp-access",
			s.Processor().HandleDeleteSmsfContext3gpp,
		},
	
		{
			"QuerySmsfContext3gpp",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/smsf-3gpp-access",
			s.Processor().HandleQuerySmsfContext3gpp,
		},
	
		{
			"CreateSmsfContextNon3gpp",
			strings.ToUpper("Put"),
			"/subscription-data/:ueId/:servingPlmnId/smsf-non-3gpp-access",
			s.Processor().HandleCreateSmsfContextNon3gpp,
		},
	
		{
			"DeleteSmsfContextNon3gpp",
			strings.ToUpper("Delete"),
			"/subscription-data/:ueId/:servingPlmnId/smsf-non-3gpp-access",
			s.Processor().HandleDeleteSmsfContextNon3gpp,
		},
	
		{
			"QuerySmsfContextNon3gpp",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/smsf-non-3gpp-access",
			s.Processor().HandleQuerySmsfContextNon3gpp,
		},
	
		{
			"QuerySmsMngData",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sms-mng-data",
			s.Processor().HandleQuerySmsMngData,
		},
	
		{
			"QuerySmsData",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sms-data",
			s.Processor().HandleQuerySmsData,
		},
	
		{
			"QuerySmData",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sm-data",
			s.Processor().HandleQuerySmData,
		},
	
		{
			"QueryTraceData",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/provisioned-data/trace-data",
			s.Processor().HandleQueryTraceData,
		},
	
		{
			"CreateAMFSubscriptions",
			strings.ToUpper("Put"),
			"/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId/amf-subscriptions",
			s.Processor().HandleCreateAMFSubscriptions,
		},
	
		{
			"ModifyAmfSubscriptionInfo",
			strings.ToUpper("Patch"),
			"/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId/amf-subscriptions",
			s.Processor().HandleModifyAmfSubscriptionInfo,
		},
	
		{
			"RemoveAmfSubscriptionsInfo",
			strings.ToUpper("Delete"),
			"/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId/amf-subscriptions",
			s.Processor().HandleRemoveAmfSubscriptionsInfo,
		},
	
		{
			"GetAmfSubscriptionInfo",
			strings.ToUpper("Get"),
			"/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId/amf-subscriptions",
			s.Processor().HandleGetAmfSubscriptionInfo,
		},
	}
}


func subMsgShortDispatchHandlerFunc(c *gin.Context) {
	op := c.Param("ueId")
	for _, route := range subShortRoutes {
		if strings.Contains(route.Pattern, op) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func subMsgDispatchHandlerFunc(c *gin.Context) {
	op := c.Param("servingPlmnId")
	subsToNotify := c.Param("ueId")
	for _, route := range subRoutes {
		if strings.Contains(route.Pattern, op) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
		// Sepcial case
		if subsToNotify == "subs-to-notify" &&
			strings.Contains(route.Pattern, "subs-to-notify") &&
			route.Method == c.Request.Method {
			c.Params = append(c.Params, gin.Param{Key: "subsId", Value: c.Param("servingPlmnId")})
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func eeMsgShortDispatchHandlerFunc(c *gin.Context) {
	groupData := c.Param("ueId")
	contextData := c.Param("servingPlmnId")
	for _, route := range eeShortRoutes {
		if strings.Contains(route.Pattern, groupData) && route.Method == c.Request.Method {
			c.Params = append(c.Params, gin.Param{Key: "ueGroupId", Value: c.Param("servingPlmnId")})
			route.HandlerFunc(c)
			return
		}
		if strings.Contains(route.Pattern, contextData) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func eeMsgDispatchHandlerFunc(c *gin.Context) {
	groupData := c.Param("ueId")
	contextData := c.Param("servingPlmnId")
	for _, route := range eeRoutes {
		if strings.Contains(route.Pattern, groupData) && route.Method == c.Request.Method {
			c.Params = append(c.Params, gin.Param{Key: "ueGroupId", Value: c.Param("servingPlmnId")})
			route.HandlerFunc(c)
			return
		}
		if strings.Contains(route.Pattern, contextData) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func appMsgDispatchHandlerFunc(c *gin.Context) {
	subsToNotify := c.Param("influenceId")
	for _, route := range appRoutes {
		if subsToNotify == "subs-to-notify" &&
			strings.Contains(route.Pattern, "subs-to-notify") &&
			route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
		if subsToNotify != "subs-to-notify" &&
			!strings.Contains(route.Pattern, "subs-to-notify") &&
			route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func expoMsgDispatchHandlerFunc(c *gin.Context) {
	subsToNotify := c.Param("ueId")
	op := c.Param("subId")
	for _, route := range expoRoutes {
		if strings.Contains(route.Pattern, op) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
		if subsToNotify == "subs-to-notify" &&
			strings.Contains(route.Pattern, "subs-to-notify") &&
			route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}



// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

var subRoutes = []Route{
	{
		"QueryEEData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/ee-profile-data",
		s.Processor().HandleQueryEEData,
	},

	{
		"PatchOperSpecData",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/operator-specific-data",
		PatchOperSpecData,
	},

	{
		"QueryOperSpecData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/operator-specific-data",
		QueryOperSpecData,
	},

	{
		"GetppData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/pp-data",
		GetppData,
	},

	{
		"ModifyPpData",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/pp-data",
		ModifyPpData,
	},

	{
		"GetIdentityData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/identity-data",
		GetIdentityData,
	},

	{
		"GetOdbData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/operator-determined-barring-data",
		GetOdbData,
	},

	// Sepcial case
	{
		"RemovesubscriptionDataSubscriptions",
		strings.ToUpper("Delete"),
		"/subscription-data/subs-to-notify/:subsId",
		RemovesubscriptionDataSubscriptions,
	},
}

var subShortRoutes = []Route{
	{
		"GetSharedData",
		strings.ToUpper("Get"),
		"/subscription-data/shared-data",
		GetSharedData,
	},

	{
		"PostSubscriptionDataSubscriptions",
		strings.ToUpper("Post"),
		"/subscription-data/subs-to-notify",
		PostSubscriptionDataSubscriptions,
	},
}

var eeShortRoutes = []Route{
	{
		"CreateEeGroupSubscriptions",
		strings.ToUpper("Post"),
		"/subscription-data/group-data/:ueGroupId/ee-subscriptions",
		CreateEeGroupSubscriptions,
	},

	{
		"QueryEeGroupSubscriptions",
		strings.ToUpper("Get"),
		"/subscription-data/group-data/:ueGroupId/ee-subscriptions",
		QueryEeGroupSubscriptions,
	},

	{
		"CreateEeSubscriptions",
		strings.ToUpper("Post"),
		"/subscription-data/:ueId/context-data/ee-subscriptions",
		CreateEeSubscriptions,
	},

	{
		"Queryeesubscriptions",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/context-data/ee-subscriptions",
		Queryeesubscriptions,
	},
}

var eeRoutes = []Route{
	{
		"RemoveeeSubscriptions",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId",
		RemoveeeSubscriptions,
	},

	{
		"UpdateEesubscriptions",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId",
		UpdateEesubscriptions,
	},

	{
		"UpdateEeGroupSubscriptions",
		strings.ToUpper("Put"),
		"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId",
		UpdateEeGroupSubscriptions,
	},

	{
		"RemoveEeGroupSubscriptions",
		strings.ToUpper("Delete"),
		"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId",
		RemoveEeGroupSubscriptions,
	},
}

var expoRoutes = []Route{
	{
		"CreateSessionManagementData",
		strings.ToUpper("Put"),
		"/exposure-data/:ueId/session-management-data/:pduSessionId",
		CreateSessionManagementData,
	},

	{
		"DeleteSessionManagementData",
		strings.ToUpper("Delete"),
		"/exposure-data/:ueId/session-management-data/:pduSessionId",
		DeleteSessionManagementData,
	},

	{
		"QuerySessionManagementData",
		strings.ToUpper("Get"),
		"/exposure-data/:ueId/session-management-data/:pduSessionId",
		QuerySessionManagementData,
	},

	{
		"CreateAccessAndMobilityData",
		strings.ToUpper("Put"),
		"/exposure-data/:ueId/access-and-mobility-data",
		CreateAccessAndMobilityData,
	},

	{
		"DeleteAccessAndMobilityData",
		strings.ToUpper("Delete"),
		"/exposure-data/:ueId/access-and-mobility-data",
		DeleteAccessAndMobilityData,
	},

	{
		"QueryAccessAndMobilityData",
		strings.ToUpper("Get"),
		"/exposure-data/:ueId/access-and-mobility-data",
		QueryAccessAndMobilityData,
	},

	{
		"ExposureDataSubsToNotifyPost",
		strings.ToUpper("Post"),
		"/exposure-data/subs-to-notify",
		ExposureDataSubsToNotifyPost,
	},

	{
		"ExposureDataSubsToNotifySubIdDelete",
		strings.ToUpper("Delete"),
		"/exposure-data/subs-to-notify/:subId",
		ExposureDataSubsToNotifySubIdDelete,
	},

	{
		"ExposureDataSubsToNotifySubIdPut",
		strings.ToUpper("Put"),
		"/exposure-data/subs-to-notify/:subId",
		ExposureDataSubsToNotifySubIdPut,
	},
}

var appRoutes = []Route{
	{
		"ApplicationDataInfluenceDataSubsToNotifyGet",
		strings.ToUpper("Get"),
		"/application-data/influenceData/subs-to-notify",
		ApplicationDataInfluenceDataSubsToNotifyGet,
	},

	{
		"ApplicationDataInfluenceDataSubsToNotifyPost",
		strings.ToUpper("Post"),
		"/application-data/influenceData/subs-to-notify",
		ApplicationDataInfluenceDataSubsToNotifyPost,
	},

	{
		"ApplicationDataInfluenceDataInfluenceIdDelete",
		strings.ToUpper("Delete"),
		"/application-data/influenceData/:influenceId",
		ApplicationDataInfluenceDataInfluenceIdDelete,
	},

	{
		"ApplicationDataInfluenceDataInfluenceIdPatch",
		strings.ToUpper("Patch"),
		"/application-data/influenceData/:influenceId",
		ApplicationDataInfluenceDataInfluenceIdPatch,
	},

	{
		"ApplicationDataInfluenceDataInfluenceIdPut",
		strings.ToUpper("Put"),
		"/application-data/influenceData/:influenceId",
		ApplicationDataInfluenceDataInfluenceIdPut,
	},
}

