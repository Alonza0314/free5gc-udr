/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datarepository

import (
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/openapi"
	"github.com/free5gc/openapi/models"
	udr_context "github.com/free5gc/udr/internal/context"
	"github.com/free5gc/udr/internal/logger"
	"github.com/free5gc/udr/internal/util"
	"github.com/free5gc/udr/pkg/factory"
	logger_util "github.com/free5gc/util/logger"

	"github.com/free5gc/udr/internal/sbi/producer"
	"github.com/free5gc/util/httpwrapper"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := logger_util.NewGinWithLogrus(logger.GinLog)
	AddService(router)
	return router
}

func subMsgShortDispatchHandlerFunc(c *gin.Context) {
	op := c.Param("ueId")
	for _, route := range subShortRoutes {
		if strings.Contains(route.Pattern, op) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func subMsgDispatchHandlerFunc(c *gin.Context) {
	op := c.Param("servingPlmnId")
	subsToNotify := c.Param("ueId")
	for _, route := range subRoutes {
		if strings.Contains(route.Pattern, op) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
		// Sepcial case
		if subsToNotify == "subs-to-notify" &&
			strings.Contains(route.Pattern, "subs-to-notify") &&
			route.Method == c.Request.Method {
			c.Params = append(c.Params, gin.Param{Key: "subsId", Value: c.Param("servingPlmnId")})
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func eeMsgShortDispatchHandlerFunc(c *gin.Context) {
	groupData := c.Param("ueId")
	contextData := c.Param("servingPlmnId")
	for _, route := range eeShortRoutes {
		if strings.Contains(route.Pattern, groupData) && route.Method == c.Request.Method {
			c.Params = append(c.Params, gin.Param{Key: "ueGroupId", Value: c.Param("servingPlmnId")})
			route.HandlerFunc(c)
			return
		}
		if strings.Contains(route.Pattern, contextData) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func eeMsgDispatchHandlerFunc(c *gin.Context) {
	groupData := c.Param("ueId")
	contextData := c.Param("servingPlmnId")
	for _, route := range eeRoutes {
		if strings.Contains(route.Pattern, groupData) && route.Method == c.Request.Method {
			c.Params = append(c.Params, gin.Param{Key: "ueGroupId", Value: c.Param("servingPlmnId")})
			route.HandlerFunc(c)
			return
		}
		if strings.Contains(route.Pattern, contextData) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func appMsgDispatchHandlerFunc(c *gin.Context) {
	subsToNotify := c.Param("influenceId")
	for _, route := range appRoutes {
		if subsToNotify == "subs-to-notify" &&
			strings.Contains(route.Pattern, "subs-to-notify") &&
			route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
		if subsToNotify != "subs-to-notify" &&
			!strings.Contains(route.Pattern, "subs-to-notify") &&
			route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func expoMsgDispatchHandlerFunc(c *gin.Context) {
	subsToNotify := c.Param("ueId")
	op := c.Param("subId")
	for _, route := range expoRoutes {
		if strings.Contains(route.Pattern, op) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
		if subsToNotify == "subs-to-notify" &&
			strings.Contains(route.Pattern, "subs-to-notify") &&
			route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func AddService(engine *gin.Engine) *gin.RouterGroup {
	group := engine.Group(factory.UdrDrResUriPrefix)

	routerAuthorizationCheck := util.NewRouterAuthorizationCheck(models.ServiceName_NUDR_DR)
	group.Use(func(c *gin.Context) {
		routerAuthorizationCheck.Check(c, udr_context.GetSelf())
	})

	for _, route := range routes {
		switch route.Method {
		case "GET":
			group.GET(route.Pattern, route.HandlerFunc)
		case "PATCH":
			group.PATCH(route.Pattern, route.HandlerFunc)
		case "POST":
			group.POST(route.Pattern, route.HandlerFunc)
		case "PUT":
			group.PUT(route.Pattern, route.HandlerFunc)
		case "DELETE":
			group.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	subPatternShort := "/subscription-data/:ueId"
	group.Any(subPatternShort, subMsgShortDispatchHandlerFunc)

	subPattern := "/subscription-data/:ueId/:servingPlmnId"
	group.Any(subPattern, subMsgDispatchHandlerFunc)

	eePatternShort := "/subscription-data/:ueId/:servingPlmnId/ee-subscriptions"
	group.Any(eePatternShort, eeMsgShortDispatchHandlerFunc)

	eePattern := "/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId"
	group.Any(eePattern, eeMsgDispatchHandlerFunc)

	/*
	 * GIN wildcard issue:
	 * '/application-data/influenceData/:influenceId' and
	 * '/application-data/influenceData/subs-to-notify' patterns will be conflicted.
	 * Only can use '/application-data/influenceData/:influenceId' pattern and
	 * use a dispatch handler to distinguish "subs-to-notify" from ":influenceId".
	 */
	appPattern := "/application-data/influenceData/:influenceId"
	group.Any(appPattern, appMsgDispatchHandlerFunc)
	expoPatternShort := "/exposure-data/:ueId/:subId"
	group.Any(expoPatternShort, expoMsgDispatchHandlerFunc)

	expoPattern := "/exposure-data/:ueId/:subId/:pduSessionId"
	group.Any(expoPattern, expoMsgDispatchHandlerFunc)

	return group
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

// HandleAppDataInfluDataSubsToNotifyConflictDelete filters invalid requested resource on subs-to-notify DELETE
func HandleAppDataInfluDataSubsToNotifyConflictDelete(c *gin.Context) {
	influenceId := c.Param("influenceId")
	if influenceId == "subs-to-notify" {
		HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete(c)
		return
	}
	c.String(http.StatusNotFound, "404 page not found")
}

// HandleAppDataInfluDataSubsToNotifyConflictGet filters invalid requested resource on subs-to-notify GET
func HandleAppDataInfluDataSubsToNotifyConflictGet(c *gin.Context) {
	influenceId := c.Param("influenceId")
	if influenceId == "subs-to-notify" {
		HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet(c)
		return
	}
	c.String(http.StatusNotFound, "404 page not found")
}

// HandleAppDataInfluDataSubsToNotifyConflictPut filters invalid requested resource on subs-to-notify PUT
func HandleAppDataInfluDataSubsToNotifyConflictPut(c *gin.Context) {
	influenceId := c.Param("influenceId")
	if influenceId == "subs-to-notify" {
		HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut(c)
		return
	}
	c.String(http.StatusNotFound, "404 page not found")
}

var routes = Routes{
	{
		"Index",
		"GET",
		"/",
		Index,
	},

	{
		"HTTPAmfContext3gpp",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/:servingPlmnId/amf-3gpp-access",
		HTTPAmfContext3gpp,
	},

	{
		"HTTPCreateAmfContext3gpp",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/amf-3gpp-access",
		HTTPCreateAmfContext3gpp,
	},

	{
		"HTTPQueryAmfContext3gpp",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/amf-3gpp-access",
		HTTPQueryAmfContext3gpp,
	},

	{
		"HTTPAmfContextNon3gpp",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/:servingPlmnId/amf-non-3gpp-access",
		HTTPAmfContextNon3gpp,
	},

	{
		"HTTPCreateAmfContextNon3gpp",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/amf-non-3gpp-access",
		HTTPCreateAmfContextNon3gpp,
	},

	{
		"HTTPQueryAmfContextNon3gpp",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/amf-non-3gpp-access",
		HTTPQueryAmfContextNon3gpp,
	},

	{
		"HTTPQueryAmData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data/am-data",
		HTTPQueryAmData,
	},

	{
		"HTTPQueryAuthenticationStatus",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/authentication-status",
		HTTPQueryAuthenticationStatus,
	},

	{
		"HTTPModifyAuthentication",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/:servingPlmnId/authentication-subscription",
		HTTPModifyAuthentication,
	},

	{
		"HTTPQueryAuthSubsData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/authentication-subscription",
		HTTPQueryAuthSubsData,
	},

	{
		"HTTPCreateAuthenticationSoR",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/sor-data",
		HTTPCreateAuthenticationSoR,
	},

	{
		"HTTPQueryAuthSoR",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/sor-data",
		HTTPQueryAuthSoR,
	},

	{
		"HTTPCreateAuthenticationStatus",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/authentication-status",
		HTTPCreateAuthenticationStatus,
	},

	{
		"HTTPApplicationDataInfluenceDataGet",
		strings.ToUpper("Get"),
		"/application-data/influenceData",
		HTTPApplicationDataInfluenceDataGet,
	},

	/*
	 * GIN wildcard issue:
	 * '/application-data/influenceData/:influenceId' and
	 * '/application-data/influenceData/subs-to-notify' patterns will be conflicted.
	 * Only can use '/application-data/influenceData/:influenceId' pattern.
	 * Here ":influenceId" value should be "subs-to-notify".
	 */
	{
		"HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete",
		strings.ToUpper("Delete"),
		"/application-data/influenceData/:influenceId/:subscriptionId",
		HandleAppDataInfluDataSubsToNotifyConflictDelete,
		// HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete,
	},

	{
		"HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet",
		strings.ToUpper("Get"),
		"/application-data/influenceData/:influenceId/:subscriptionId",
		HandleAppDataInfluDataSubsToNotifyConflictGet,
		// HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet,
	},

	{
		"HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut",
		strings.ToUpper("Put"),
		"/application-data/influenceData/:influenceId/:subscriptionId",
		HandleAppDataInfluDataSubsToNotifyConflictPut,
		// HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut,
	},

	{
		"HTTPApplicationDataPfdsAppIdDelete",
		strings.ToUpper("Delete"),
		"/application-data/pfds/:appId",
		HTTPApplicationDataPfdsAppIdDelete,
	},

	{
		"HTTPApplicationDataPfdsAppIdGet",
		strings.ToUpper("Get"),
		"/application-data/pfds/:appId",
		HTTPApplicationDataPfdsAppIdGet,
	},

	{
		"HTTPApplicationDataPfdsAppIdPut",
		strings.ToUpper("Put"),
		"/application-data/pfds/:appId",
		HTTPApplicationDataPfdsAppIdPut,
	},

	{
		"HTTPApplicationDataPfdsGet",
		strings.ToUpper("Get"),
		"/application-data/pfds",
		HTTPApplicationDataPfdsGet,
	},

	{
		"HTTPPolicyDataBdtDataBdtReferenceIdDelete",
		strings.ToUpper("Delete"),
		"/policy-data/bdt-data/:bdtReferenceId",
		HTTPPolicyDataBdtDataBdtReferenceIdDelete,
	},

	{
		"HTTPPolicyDataBdtDataBdtReferenceIdGet",
		strings.ToUpper("Get"),
		"/policy-data/bdt-data/:bdtReferenceId",
		HTTPPolicyDataBdtDataBdtReferenceIdGet,
	},

	{
		"HTTPPolicyDataBdtDataBdtReferenceIdPut",
		strings.ToUpper("Put"),
		"/policy-data/bdt-data/:bdtReferenceId",
		HTTPPolicyDataBdtDataBdtReferenceIdPut,
	},

	{
		"HTTPPolicyDataBdtDataGet",
		strings.ToUpper("Get"),
		"/policy-data/bdt-data",
		HTTPPolicyDataBdtDataGet,
	},

	{
		"HTTPPolicyDataPlmnsPlmnIdUePolicySetGet",
		strings.ToUpper("Get"),
		"/policy-data/plmns/:plmnId/ue-policy-set",
		HTTPPolicyDataPlmnsPlmnIdUePolicySetGet,
	},

	{
		"HTTPPolicyDataSponsorConnectivityDataSponsorIdGet",
		strings.ToUpper("Get"),
		"/policy-data/sponsor-connectivity-data/:sponsorId",
		HTTPPolicyDataSponsorConnectivityDataSponsorIdGet,
	},

	{
		"HTTPPolicyDataSubsToNotifyPost",
		strings.ToUpper("Post"),
		"/policy-data/subs-to-notify",
		HTTPPolicyDataSubsToNotifyPost,
	},

	{
		"HTTPPolicyDataSubsToNotifySubsIdDelete",
		strings.ToUpper("Delete"),
		"/policy-data/subs-to-notify/:subsId",
		HTTPPolicyDataSubsToNotifySubsIdDelete,
	},

	{
		"HTTPPolicyDataSubsToNotifySubsIdPut",
		strings.ToUpper("Put"),
		"/policy-data/subs-to-notify/:subsId",
		HTTPPolicyDataSubsToNotifySubsIdPut,
	},

	{
		"HTTPPolicyDataUesUeIdAmDataGet",
		strings.ToUpper("Get"),
		"/policy-data/ues/:ueId/am-data",
		HTTPPolicyDataUesUeIdAmDataGet,
	},

	{
		"HTTPPolicyDataUesUeIdOperatorSpecificDataGet",
		strings.ToUpper("Get"),
		"/policy-data/ues/:ueId/operator-specific-data",
		HTTPPolicyDataUesUeIdOperatorSpecificDataGet,
	},

	{
		"HTTPPolicyDataUesUeIdOperatorSpecificDataPatch",
		strings.ToUpper("Patch"),
		"/policy-data/ues/:ueId/operator-specific-data",
		HTTPPolicyDataUesUeIdOperatorSpecificDataPatch,
	},

	{
		"HTTPPolicyDataUesUeIdOperatorSpecificDataPut",
		strings.ToUpper("Put"),
		"/policy-data/ues/:ueId/operator-specific-data",
		HTTPPolicyDataUesUeIdOperatorSpecificDataPut,
	},

	{
		"HTTPPolicyDataUesUeIdSmDataGet",
		strings.ToUpper("Get"),
		"/policy-data/ues/:ueId/sm-data",
		HTTPPolicyDataUesUeIdSmDataGet,
	},

	{
		"HTTPPolicyDataUesUeIdSmDataPatch",
		strings.ToUpper("Patch"),
		"/policy-data/ues/:ueId/sm-data",
		HTTPPolicyDataUesUeIdSmDataPatch,
	},

	{
		"HTTPPolicyDataUesUeIdSmDataUsageMonIdDelete",
		strings.ToUpper("Delete"),
		"/policy-data/ues/:ueId/sm-data/:usageMonId",
		HTTPPolicyDataUesUeIdSmDataUsageMonIdDelete,
	},

	{
		"HTTPPolicyDataUesUeIdSmDataUsageMonIdGet",
		strings.ToUpper("Get"),
		"/policy-data/ues/:ueId/sm-data/:usageMonId",
		HTTPPolicyDataUesUeIdSmDataUsageMonIdGet,
	},

	{
		"HTTPPolicyDataUesUeIdSmDataUsageMonIdPut",
		strings.ToUpper("Put"),
		"/policy-data/ues/:ueId/sm-data/:usageMonId",
		HTTPPolicyDataUesUeIdSmDataUsageMonIdPut,
	},

	{
		"HTTPPolicyDataUesUeIdUePolicySetGet",
		strings.ToUpper("Get"),
		"/policy-data/ues/:ueId/ue-policy-set",
		HTTPPolicyDataUesUeIdUePolicySetGet,
	},

	{
		"HTTPPolicyDataUesUeIdUePolicySetPatch",
		strings.ToUpper("Patch"),
		"/policy-data/ues/:ueId/ue-policy-set",
		HTTPPolicyDataUesUeIdUePolicySetPatch,
	},

	{
		"HTTPPolicyDataUesUeIdUePolicySetPut",
		strings.ToUpper("Put"),
		"/policy-data/ues/:ueId/ue-policy-set",
		HTTPPolicyDataUesUeIdUePolicySetPut,
	},

	{
		"HTTPQueryProvisionedData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data",
		HTTPQueryProvisionedData,
	},

	{
		"HTTPRemovesdmSubscriptions",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/:servingPlmnId/sdm-subscriptions/:subsId",
		HTTPRemovesdmSubscriptions,
	},

	{
		"HTTPUpdatesdmsubscriptions",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/sdm-subscriptions/:subsId",
		HTTPUpdatesdmsubscriptions,
	},

	{
		"HTTPCreateSdmSubscriptions",
		strings.ToUpper("Post"),
		"/subscription-data/:ueId/:servingPlmnId/sdm-subscriptions",
		HTTPCreateSdmSubscriptions,
	},

	{
		"HTTPQuerysdmsubscriptions",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/sdm-subscriptions",
		HTTPQuerysdmsubscriptions,
	},

	{
		"HTTPCreateSmfContextNon3gpp",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/smf-registrations/:pduSessionId",
		HTTPCreateSmfContextNon3gpp,
	},

	{
		"HTTPDeleteSmfContext",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/:servingPlmnId/smf-registrations/:pduSessionId",
		HTTPDeleteSmfContext,
	},

	{
		"HTTPQuerySmfRegistration",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/smf-registrations/:pduSessionId",
		HTTPQuerySmfRegistration,
	},

	{
		"HTTPQuerySmfRegList",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/smf-registrations",
		HTTPQuerySmfRegList,
	},

	{
		"HTTPQuerySmfSelectData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data/smf-selection-subscription-data",
		HTTPQuerySmfSelectData,
	},

	{
		"HTTPCreateSmsfContext3gpp",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/smsf-3gpp-access",
		HTTPCreateSmsfContext3gpp,
	},

	{
		"HTTPDeleteSmsfContext3gpp",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/:servingPlmnId/smsf-3gpp-access",
		HTTPDeleteSmsfContext3gpp,
	},

	{
		"HTTPQuerySmsfContext3gpp",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/smsf-3gpp-access",
		HTTPQuerySmsfContext3gpp,
	},

	{
		"HTTPCreateSmsfContextNon3gpp",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/smsf-non-3gpp-access",
		HTTPCreateSmsfContextNon3gpp,
	},

	{
		"HTTPDeleteSmsfContextNon3gpp",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/:servingPlmnId/smsf-non-3gpp-access",
		HTTPDeleteSmsfContextNon3gpp,
	},

	{
		"HTTPQuerySmsfContextNon3gpp",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/smsf-non-3gpp-access",
		HTTPQuerySmsfContextNon3gpp,
	},

	{
		"HTTPQuerySmsMngData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sms-mng-data",
		HTTPQuerySmsMngData,
	},

	{
		"HTTPQuerySmsData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sms-data",
		HTTPQuerySmsData,
	},

	{
		"HTTPQuerySmData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sm-data",
		HTTPQuerySmData,
	},

	{
		"HTTPQueryTraceData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data/trace-data",
		HTTPQueryTraceData,
	},

	{
		"HTTPCreateAMFSubscriptions",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId/amf-subscriptions",
		HTTPCreateAMFSubscriptions,
	},

	{
		"HTTPModifyAmfSubscriptionInfo",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId/amf-subscriptions",
		HTTPModifyAmfSubscriptionInfo,
	},

	{
		"HTTPRemoveAmfSubscriptionsInfo",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId/amf-subscriptions",
		HTTPRemoveAmfSubscriptionsInfo,
	},

	{
		"HTTPGetAmfSubscriptionInfo",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId/amf-subscriptions",
		HTTPGetAmfSubscriptionInfo,
	},
}

var subRoutes = Routes{
	{
		"HTTPQueryEEData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/ee-profile-data",
		HTTPQueryEEData,
	},

	{
		"HTTPPatchOperSpecData",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/operator-specific-data",
		HTTPPatchOperSpecData,
	},

	{
		"HTTPQueryOperSpecData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/operator-specific-data",
		HTTPQueryOperSpecData,
	},

	{
		"HTTPGetppData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/pp-data",
		HTTPGetppData,
	},

	{
		"HTTPModifyPpData",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/pp-data",
		HTTPModifyPpData,
	},

	{
		"HTTPGetIdentityData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/identity-data",
		HTTPGetIdentityData,
	},

	{
		"HTTPGetOdbData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/operator-determined-barring-data",
		HTTPGetOdbData,
	},

	// Sepcial case
	{
		"HTTPRemovesubscriptionDataSubscriptions",
		strings.ToUpper("Delete"),
		"/subscription-data/subs-to-notify/:subsId",
		HTTPRemovesubscriptionDataSubscriptions,
	},
}

var subShortRoutes = Routes{
	{
		"HTTPGetSharedData",
		strings.ToUpper("Get"),
		"/subscription-data/shared-data",
		HTTPGetSharedData,
	},

	{
		"HTTPPostSubscriptionDataSubscriptions",
		strings.ToUpper("Post"),
		"/subscription-data/subs-to-notify",
		HTTPPostSubscriptionDataSubscriptions,
	},
}

var eeShortRoutes = Routes{
	{
		"HTTPCreateEeGroupSubscriptions",
		strings.ToUpper("Post"),
		"/subscription-data/group-data/:ueGroupId/ee-subscriptions",
		HTTPCreateEeGroupSubscriptions,
	},

	{
		"HTTPQueryEeGroupSubscriptions",
		strings.ToUpper("Get"),
		"/subscription-data/group-data/:ueGroupId/ee-subscriptions",
		HTTPQueryEeGroupSubscriptions,
	},

	{
		"HTTPCreateEeSubscriptions",
		strings.ToUpper("Post"),
		"/subscription-data/:ueId/context-data/ee-subscriptions",
		HTTPCreateEeSubscriptions,
	},

	{
		"HTTPQueryeesubscriptions",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/context-data/ee-subscriptions",
		HTTPQueryeesubscriptions,
	},
}

var eeRoutes = Routes{
	{
		"HTTPRemoveeeSubscriptions",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId",
		HTTPRemoveeeSubscriptions,
	},

	{
		"HTTPUpdateEesubscriptions",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId",
		HTTPUpdateEesubscriptions,
	},

	{
		"HTTPUpdateEeGroupSubscriptions",
		strings.ToUpper("Put"),
		"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId",
		HTTPUpdateEeGroupSubscriptions,
	},

	{
		"HTTPRemoveEeGroupSubscriptions",
		strings.ToUpper("Delete"),
		"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId",
		HTTPRemoveEeGroupSubscriptions,
	},
}

var expoRoutes = Routes{
	{
		"HTTPCreateSessionManagementData",
		strings.ToUpper("Put"),
		"/exposure-data/:ueId/session-management-data/:pduSessionId",
		HTTPCreateSessionManagementData,
	},

	{
		"HTTPDeleteSessionManagementData",
		strings.ToUpper("Delete"),
		"/exposure-data/:ueId/session-management-data/:pduSessionId",
		HTTPDeleteSessionManagementData,
	},

	{
		"HTTPQuerySessionManagementData",
		strings.ToUpper("Get"),
		"/exposure-data/:ueId/session-management-data/:pduSessionId",
		HTTPQuerySessionManagementData,
	},

	{
		"CreateAccessAndMobilityData",
		strings.ToUpper("Put"),
		"/exposure-data/:ueId/access-and-mobility-data",
		CreateAccessAndMobilityData,
	},

	{
		"DeleteAccessAndMobilityData",
		strings.ToUpper("Delete"),
		"/exposure-data/:ueId/access-and-mobility-data",
		DeleteAccessAndMobilityData,
	},

	{
		"QueryAccessAndMobilityData",
		strings.ToUpper("Get"),
		"/exposure-data/:ueId/access-and-mobility-data",
		QueryAccessAndMobilityData,
	},

	{
		"HTTPExposureDataSubsToNotifyPost",
		strings.ToUpper("Post"),
		"/exposure-data/subs-to-notify",
		HTTPExposureDataSubsToNotifyPost,
	},

	{
		"HTTPExposureDataSubsToNotifySubIdDelete",
		strings.ToUpper("Delete"),
		"/exposure-data/subs-to-notify/:subId",
		HTTPExposureDataSubsToNotifySubIdDelete,
	},

	{
		"HTTPExposureDataSubsToNotifySubIdPut",
		strings.ToUpper("Put"),
		"/exposure-data/subs-to-notify/:subId",
		HTTPExposureDataSubsToNotifySubIdPut,
	},
}

var appRoutes = Routes{
	{
		"HTTPApplicationDataInfluenceDataSubsToNotifyGet",
		strings.ToUpper("Get"),
		"/application-data/influenceData/subs-to-notify",
		HTTPApplicationDataInfluenceDataSubsToNotifyGet,
	},

	{
		"HTTPApplicationDataInfluenceDataSubsToNotifyPost",
		strings.ToUpper("Post"),
		"/application-data/influenceData/subs-to-notify",
		HTTPApplicationDataInfluenceDataSubsToNotifyPost,
	},

	{
		"HTTPApplicationDataInfluenceDataInfluenceIdDelete",
		strings.ToUpper("Delete"),
		"/application-data/influenceData/:influenceId",
		HTTPApplicationDataInfluenceDataInfluenceIdDelete,
	},

	{
		"HTTPApplicationDataInfluenceDataInfluenceIdPatch",
		strings.ToUpper("Patch"),
		"/application-data/influenceData/:influenceId",
		HTTPApplicationDataInfluenceDataInfluenceIdPatch,
	},

	{
		"HTTPApplicationDataInfluenceDataInfluenceIdPut",
		strings.ToUpper("Put"),
		"/application-data/influenceData/:influenceId",
		HTTPApplicationDataInfluenceDataInfluenceIdPut,
	},
}

// HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete -
func HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete(c *gin.Context) {
	// New HTTP request
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["subscriptionId"] = c.Params.ByName("subscriptionId")

	// Handle request
	rsp := producer.HandleApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete(req)

	if rsp.Body != nil {
		// Serialize response body
		responseBody, err := openapi.Serialize(rsp.Body, "application/json")
		if err != nil {
			logger.DataRepoLog.Errorln(err)
			problemDetails := models.ProblemDetails{
				Status: http.StatusInternalServerError,
				Cause:  "SYSTEM_FAILURE",
				Detail: err.Error(),
			}
			c.JSON(http.StatusInternalServerError, problemDetails)
		} else {
			c.Data(rsp.Status, "application/json", responseBody)
		}
	} else {
		c.Data(rsp.Status, "", nil)
	}
}

// HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet -
func HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet(c *gin.Context) {
	// New HTTP request
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["subscriptionId"] = c.Params.ByName("subscriptionId")

	// Handle request
	rsp := producer.HandleApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet(req)

	// Serialize response body
	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut -
func HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut(c *gin.Context) {
	// Get HTTP request body
	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	// Deserialize request body
	var trafficInfluSub models.TrafficInfluSub
	err = openapi.Deserialize(&trafficInfluSub, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	// New HTTP request
	req := httpwrapper.NewRequest(c.Request, trafficInfluSub)
	req.Params["subscriptionId"] = c.Params.ByName("subscriptionId")

	// Handle request
	rsp := producer.HandleApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut(req)

	// Serialize response body
	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPAmfContext3gpp - To modify the AMF context data of a UE using 3gpp access in the UDR
func HTTPAmfContext3gpp(c *gin.Context) {
	var patchItemArray []models.PatchItem

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&patchItemArray, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, patchItemArray)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleAmfContext3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPCreateAmfContext3gpp - To store the AMF context data of a UE using 3gpp access in the UDR
func HTTPCreateAmfContext3gpp(c *gin.Context) {
	var amf3GppAccessRegistration models.Amf3GppAccessRegistration

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&amf3GppAccessRegistration, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, amf3GppAccessRegistration)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleCreateAmfContext3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQueryAmfContext3gpp - Retrieves the AMF context data of a UE using 3gpp access
func HTTPQueryAmfContext3gpp(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleQueryAmfContext3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPAmfContextNon3gpp - To modify the AMF context data of a UE using non 3gpp access in the UDR
func HTTPAmfContextNon3gpp(c *gin.Context) {
	var patchItemArray []models.PatchItem

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&patchItemArray, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, patchItemArray)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleAmfContextNon3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPCreateAmfContextNon3gpp - To store the AMF context data of a UE using non-3gpp access in the UDR
func HTTPCreateAmfContextNon3gpp(c *gin.Context) {
	var amfNon3GppAccessRegistration models.AmfNon3GppAccessRegistration

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&amfNon3GppAccessRegistration, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, amfNon3GppAccessRegistration)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleCreateAmfContextNon3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQueryAmfContextNon3gpp - Retrieves the AMF context data of a UE using non-3gpp access
func HTTPQueryAmfContextNon3gpp(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleQueryAmfContextNon3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQueryAmData - Retrieves the access and mobility subscription data of a UE
func HTTPQueryAmData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["servingPlmnId"] = c.Params.ByName("servingPlmnId")

	rsp := producer.HandleQueryAmData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPCreateAuthenticationStatus - To store the Authentication Status data of a UE
func HTTPCreateAuthenticationStatus(c *gin.Context) {
	var authEvent models.AuthEvent

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&authEvent, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, authEvent)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleCreateAuthenticationStatus(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQueryAuthenticationStatus - Retrieves the Authentication Status of a UE
func HTTPQueryAuthenticationStatus(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleQueryAuthenticationStatus(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPModifyAuthentication - modify the authentication subscription data of a UE
func HTTPModifyAuthentication(c *gin.Context) {
	var patchItemArray []models.PatchItem

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&patchItemArray, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, patchItemArray)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleModifyAuthentication(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQueryAuthSubsData - Retrieves the authentication subscription data of a UE
func HTTPQueryAuthSubsData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleQueryAuthSubsData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPCreateAuthenticationSoR - To store the SoR acknowledgement information of a UE
func HTTPCreateAuthenticationSoR(c *gin.Context) {
	var sorData models.SorData

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&sorData, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, sorData)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleCreateAuthenticationSoR(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQueryAuthSoR - Retrieves the SoR acknowledgement information of a UE
func HTTPQueryAuthSoR(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleQueryAuthSoR(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPApplicationDataInfluenceDataGet -
func HTTPApplicationDataInfluenceDataGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Query["influence-Ids"] = c.QueryArray("influence-Ids")
	req.Query["dnns"] = c.QueryArray("dnns")
	req.Query["snssais"] = c.QueryArray("snssais")
	req.Query["internal-Group-Ids"] = c.QueryArray("internal-Group-Id")
	req.Query["supis"] = c.QueryArray("supis")
	rsp := producer.HandleApplicationDataInfluenceDataGet(req)
	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

func sendResponse(c *gin.Context, rsp *httpwrapper.Response) {
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		pd := openapi.ProblemDetailsSystemFailure(err.Error())
		c.JSON(http.StatusInternalServerError, pd)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

func getDataFromRequestBody(c *gin.Context, data interface{}) error {
	reqBody, err := c.GetRawData()
	if err != nil {
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		pd := openapi.ProblemDetailsSystemFailure(err.Error())
		c.JSON(http.StatusInternalServerError, pd)
		return err
	}

	err = openapi.Deserialize(data, reqBody, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Deserialize Request Body error: %+v", err)
		pd := util.ProblemDetailsMalformedReqSyntax(err.Error())
		c.JSON(http.StatusBadRequest, pd)
		return err
	}
	return err
}

// HTTPApplicationDataPfdsAppIdDelete -
func HTTPApplicationDataPfdsAppIdDelete(c *gin.Context) {
	rsp := producer.HandleApplicationDataPfdsAppIdDelete(c.Params.ByName("appId"))
	sendResponse(c, rsp)
}

// HTTPApplicationDataPfdsAppIdGet -
func HTTPApplicationDataPfdsAppIdGet(c *gin.Context) {
	rsp := producer.HandleApplicationDataPfdsAppIdGet(c.Params.ByName("appId"))
	sendResponse(c, rsp)
}

// HTTPApplicationDataPfdsAppIdPut -
func HTTPApplicationDataPfdsAppIdPut(c *gin.Context) {
	var pfdDataforApp models.PfdDataForApp

	if err := getDataFromRequestBody(c, &pfdDataforApp); err != nil {
		return
	}

	rsp := producer.HandleApplicationDataPfdsAppIdPut(c.Params.ByName("appId"), &pfdDataforApp)

	sendResponse(c, rsp)
}

// HTTPApplicationDataPfdsGet -
func HTTPApplicationDataPfdsGet(c *gin.Context) {
	query := c.Request.URL.Query()
	rsp := producer.HandleApplicationDataPfdsGet(query["appId"])
	sendResponse(c, rsp)
}

// HTTPExposureDataSubsToNotifyPost -
func HTTPExposureDataSubsToNotifyPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPExposureDataSubsToNotifySubIdDelete - Deletes a subcription for notifications
func HTTPExposureDataSubsToNotifySubIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPExposureDataSubsToNotifySubIdPut - updates a subcription for notifications
func HTTPExposureDataSubsToNotifySubIdPut(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPPolicyDataBdtDataBdtReferenceIdDelete -
func HTTPPolicyDataBdtDataBdtReferenceIdDelete(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["bdtReferenceId"] = c.Params.ByName("bdtReferenceId")

	rsp := producer.HandlePolicyDataBdtDataBdtReferenceIdDelete(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataBdtDataBdtReferenceIdGet -
func HTTPPolicyDataBdtDataBdtReferenceIdGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["bdtReferenceId"] = c.Params.ByName("bdtReferenceId")

	rsp := producer.HandlePolicyDataBdtDataBdtReferenceIdGet(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataBdtDataBdtReferenceIdPut -
func HTTPPolicyDataBdtDataBdtReferenceIdPut(c *gin.Context) {
	var bdtData models.BdtData

	if err := getDataFromRequestBody(c, &bdtData); err != nil {
		return
	}

	req := httpwrapper.NewRequest(c.Request, bdtData)
	req.Params["bdtReferenceId"] = c.Params.ByName("bdtReferenceId")

	rsp := producer.HandlePolicyDataBdtDataBdtReferenceIdPut(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataBdtDataGet -
func HTTPPolicyDataBdtDataGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)

	rsp := producer.HandlePolicyDataBdtDataGet(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataPlmnsPlmnIdUePolicySetGet -
func HTTPPolicyDataPlmnsPlmnIdUePolicySetGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["plmnId"] = c.Params.ByName("plmnId")

	rsp := producer.HandlePolicyDataPlmnsPlmnIdUePolicySetGet(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataSponsorConnectivityDataSponsorIdGet -
func HTTPPolicyDataSponsorConnectivityDataSponsorIdGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["sponsorId"] = c.Params.ByName("sponsorId")

	rsp := producer.HandlePolicyDataSponsorConnectivityDataSponsorIdGet(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataSubsToNotifyPost -
func HTTPPolicyDataSubsToNotifyPost(c *gin.Context) {
	var policyDataSubscription models.PolicyDataSubscription

	if err := getDataFromRequestBody(c, &policyDataSubscription); err != nil {
		return
	}

	req := httpwrapper.NewRequest(c.Request, policyDataSubscription)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataSubsToNotifyPost(req)

	for key, val := range rsp.Header {
		c.Header(key, val[0])
	}

	sendResponse(c, rsp)
}

// HTTPPolicyDataSubsToNotifySubsIdDelete -
func HTTPPolicyDataSubsToNotifySubsIdDelete(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandlePolicyDataSubsToNotifySubsIdDelete(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataSubsToNotifySubsIdPut -
func HTTPPolicyDataSubsToNotifySubsIdPut(c *gin.Context) {
	var policyDataSubscription models.PolicyDataSubscription

	if err := getDataFromRequestBody(c, &policyDataSubscription); err != nil {
		return
	}

	req := httpwrapper.NewRequest(c.Request, policyDataSubscription)
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandlePolicyDataSubsToNotifySubsIdPut(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdAmDataGet -
func HTTPPolicyDataUesUeIdAmDataGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdAmDataGet(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdOperatorSpecificDataGet -
func HTTPPolicyDataUesUeIdOperatorSpecificDataGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdOperatorSpecificDataGet(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdOperatorSpecificDataPatch - Need to be fixed
func HTTPPolicyDataUesUeIdOperatorSpecificDataPatch(c *gin.Context) {
	var patchItemArray []models.PatchItem

	if err := getDataFromRequestBody(c, &patchItemArray); err != nil {
		return
	}

	req := httpwrapper.NewRequest(c.Request, patchItemArray)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdOperatorSpecificDataPatch(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdOperatorSpecificDataPut -
func HTTPPolicyDataUesUeIdOperatorSpecificDataPut(c *gin.Context) {
	var operatorSpecificDataContainerMap map[string]models.OperatorSpecificDataContainer

	if err := getDataFromRequestBody(c, &operatorSpecificDataContainerMap); err != nil {
		return
	}

	req := httpwrapper.NewRequest(c.Request, operatorSpecificDataContainerMap)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdOperatorSpecificDataPut(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdSmDataGet -
func HTTPPolicyDataUesUeIdSmDataGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdSmDataGet(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdSmDataPatch - Need to be fixed
func HTTPPolicyDataUesUeIdSmDataPatch(c *gin.Context) {
	var usageMonDataMap map[string]models.UsageMonData

	if err := getDataFromRequestBody(c, &usageMonDataMap); err != nil {
		return
	}

	req := httpwrapper.NewRequest(c.Request, usageMonDataMap)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdSmDataPatch(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdSmDataUsageMonIdDelete -
func HTTPPolicyDataUesUeIdSmDataUsageMonIdDelete(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["usageMonId"] = c.Params.ByName("usageMonId")

	rsp := producer.HandlePolicyDataUesUeIdSmDataUsageMonIdDelete(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdSmDataUsageMonIdGet -
func HTTPPolicyDataUesUeIdSmDataUsageMonIdGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["usageMonId"] = c.Params.ByName("usageMonId")

	rsp := producer.HandlePolicyDataUesUeIdSmDataUsageMonIdGet(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdSmDataUsageMonIdPut -
func HTTPPolicyDataUesUeIdSmDataUsageMonIdPut(c *gin.Context) {
	var usageMonData models.UsageMonData

	if err := getDataFromRequestBody(c, &usageMonData); err != nil {
		return
	}

	req := httpwrapper.NewRequest(c.Request, usageMonData)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["usageMonId"] = c.Params.ByName("usageMonId")

	rsp := producer.HandlePolicyDataUesUeIdSmDataUsageMonIdPut(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdUePolicySetGet -
func HTTPPolicyDataUesUeIdUePolicySetGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdUePolicySetGet(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdUePolicySetPatch -
func HTTPPolicyDataUesUeIdUePolicySetPatch(c *gin.Context) {
	var uePolicySet models.UePolicySet

	if err := getDataFromRequestBody(c, &uePolicySet); err != nil {
		return
	}

	req := httpwrapper.NewRequest(c.Request, uePolicySet)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdUePolicySetPatch(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdUePolicySetPut -
func HTTPPolicyDataUesUeIdUePolicySetPut(c *gin.Context) {
	var uePolicySet models.UePolicySet

	if err := getDataFromRequestBody(c, &uePolicySet); err != nil {
		return
	}

	req := httpwrapper.NewRequest(c.Request, uePolicySet)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdUePolicySetPut(req)

	sendResponse(c, rsp)
}

// HTTPQueryProvisionedData - Retrieve multiple provisioned data sets of a UE
func HTTPQueryProvisionedData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["servingPlmnId"] = c.Params.ByName("servingPlmnId")

	rsp := producer.HandleQueryProvisionedData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPRemovesdmSubscriptions - Deletes a sdmsubscriptions
func HTTPRemovesdmSubscriptions(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandleRemovesdmSubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPUpdatesdmsubscriptions - Stores an individual sdm subscriptions of a UE
func HTTPUpdatesdmsubscriptions(c *gin.Context) {
	var sdmSubscription models.SdmSubscription

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&sdmSubscription, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, sdmSubscription)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandleUpdatesdmsubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPCreateSdmSubscriptions - Create individual sdm subscription
func HTTPCreateSdmSubscriptions(c *gin.Context) {
	var sdmSubscription models.SdmSubscription

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&sdmSubscription, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, sdmSubscription)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleCreateSdmSubscriptions(req)

	for key, val := range rsp.Header {
		c.Header(key, val[0])
	}
	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQuerysdmsubscriptions - Retrieves the sdm subscriptions of a UE
func HTTPQuerysdmsubscriptions(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleQuerysdmsubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPCreateSmfContextNon3gpp - To create an individual SMF context data of a UE in the UDR
func HTTPCreateSmfContextNon3gpp(c *gin.Context) {
	var smfRegistration models.SmfRegistration

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&smfRegistration, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, smfRegistration)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleCreateSmfContextNon3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPDeleteSmfContext - To remove an individual SMF context data of a UE the UDR
func HTTPDeleteSmfContext(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["pduSessionId"] = c.Params.ByName("pduSessionId")

	rsp := producer.HandleDeleteSmfContext(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQuerySmfRegistration - Retrieves the individual SMF registration of a UE
func HTTPQuerySmfRegistration(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["pduSessionId"] = c.Params.ByName("pduSessionId")

	rsp := producer.HandleQuerySmfRegistration(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQuerySmfRegList - Retrieves the SMF registration list of a UE
func HTTPQuerySmfRegList(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleQuerySmfRegList(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQuerySmfSelectData - Retrieves the SMF selection subscription data of a UE
func HTTPQuerySmfSelectData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["servingPlmnId"] = c.Params.ByName("servingPlmnId")

	rsp := producer.HandleQuerySmfSelectData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPCreateSmsfContext3gpp - Create the SMSF context data of a UE via 3GPP access
func HTTPCreateSmsfContext3gpp(c *gin.Context) {
	var smsfRegistration models.SmsfRegistration

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&smsfRegistration, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, smsfRegistration)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleCreateSmsfContext3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPDeleteSmsfContext3gpp - To remove the SMSF context data of a UE via 3GPP access
func HTTPDeleteSmsfContext3gpp(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleDeleteSmsfContext3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQuerySmsfContext3gpp - Retrieves the SMSF context data of a UE using 3gpp access
func HTTPQuerySmsfContext3gpp(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleQuerySmsfContext3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPCreateSmsfContextNon3gpp - Create the SMSF context data of a UE via non-3GPP access
func HTTPCreateSmsfContextNon3gpp(c *gin.Context) {
	var smsfRegistration models.SmsfRegistration

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&smsfRegistration, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, smsfRegistration)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleCreateSmsfContextNon3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPDeleteSmsfContextNon3gpp - To remove the SMSF context data of a UE via non-3GPP access
func HTTPDeleteSmsfContextNon3gpp(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleDeleteSmsfContextNon3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQuerySmsfContextNon3gpp - Retrieves the SMSF context data of a UE using non-3gpp access
func HTTPQuerySmsfContextNon3gpp(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleQuerySmsfContextNon3gpp(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQuerySmsMngData - Retrieves the SMS management subscription data of a UE
func HTTPQuerySmsMngData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["servingPlmnId"] = c.Params.ByName("servingPlmnId")

	rsp := producer.HandleQuerySmsMngData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQuerySmsData - Retrieves the SMS subscription data of a UE
func HTTPQuerySmsData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["servingPlmnId"] = c.Params.ByName("servingPlmnId")

	rsp := producer.HandleQuerySmsData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQuerySmData - Retrieves the Session Management subscription data of a UE
func HTTPQuerySmData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["servingPlmnId"] = c.Params.ByName("servingPlmnId")

	rsp := producer.HandleQuerySmData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQueryTraceData - Retrieves the trace configuration data of a UE
func HTTPQueryTraceData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["servingPlmnId"] = c.Params.ByName("servingPlmnId")

	rsp := producer.HandleQueryTraceData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPCreateAMFSubscriptions - Creates AMF Subscription Info for an eeSubscription
func HTTPCreateAMFSubscriptions(c *gin.Context) {
	var amfSubscriptionInfoArray []models.AmfSubscriptionInfo

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&amfSubscriptionInfoArray, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, amfSubscriptionInfoArray)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandleCreateAMFSubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPRemoveAmfSubscriptionsInfo - Deletes AMF Subscription Info for an eeSubscription
func HTTPRemoveAmfSubscriptionsInfo(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandleRemoveAmfSubscriptionsInfo(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPModifyAmfSubscriptionInfo - modify the AMF Subscription Info
func HTTPModifyAmfSubscriptionInfo(c *gin.Context) {
	var patchItemArray []models.PatchItem

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&patchItemArray, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, patchItemArray)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandleModifyAmfSubscriptionInfo(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPGetAmfSubscriptionInfo - Retrieve AMF subscription Info
func HTTPGetAmfSubscriptionInfo(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandleGetAmfSubscriptionInfo(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}

	// req := httpwrapper.NewRequest(c.Request, nil)
	// req.Params["ueId"] = c.Params.ByName("ueId")
	// req.Params["subsId"] = c.Params.ByName("subsId")

	// handlerMsg := message.NewHandlerMessage(message.EventGetAmfSubscriptionInfo, req)
	// message.SendMessage(handlerMsg)

	// rsp := <-handlerMsg.ResponseChan

	// HTTPResponse := rsp.HTTPResponse

	// c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// HTTPQueryEEData - Retrieves the ee profile data of a UE
func HTTPQueryEEData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleQueryEEData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPAmfContext3gpp - To modify operator specific data of a UE
func HTTPPatchOperSpecData(c *gin.Context) {
	var patchItemArray []models.PatchItem

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&patchItemArray, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, patchItemArray)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePatchOperSpecData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQueryOperSpecData - Retrieves the operator specific data of a UE
func HTTPQueryOperSpecData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleQueryOperSpecData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPGetppData - Read the profile of a given UE
func HTTPGetppData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleGetppData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPModifyPpData - modify the provisioned parameter data
func HTTPModifyPpData(c *gin.Context) {
	var patchItemArray []models.PatchItem

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&patchItemArray, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, patchItemArray)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleModifyPpData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPGetIdentityData - Retrieve identity data by SUPI or GPSI
func HTTPGetIdentityData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleGetIdentityData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPGetOdbData - Retrieve ODB Data data by SUPI or GPSI
func HTTPGetOdbData(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleGetOdbData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPRemovesubscriptionDataSubscriptions - Deletes a subscriptionDataSubscriptions
func HTTPRemovesubscriptionDataSubscriptions(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandleRemovesubscriptionDataSubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPGetSharedData - retrieve shared data
func HTTPGetSharedData(c *gin.Context) {
	sharedDataIdArray := c.QueryArray("shared-data-ids")
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Query["sharedDataIds"] = sharedDataIdArray

	rsp := producer.HandleGetSharedData(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPostSubscriptionDataSubscriptions - Subscription data subscriptions
func HTTPPostSubscriptionDataSubscriptions(c *gin.Context) {
	var subscriptionDataSubscriptions models.SubscriptionDataSubscriptions

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&subscriptionDataSubscriptions, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, subscriptionDataSubscriptions)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePostSubscriptionDataSubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPCreateEeGroupSubscriptions - Create individual EE subscription for a group of UEs or any UE
func HTTPCreateEeGroupSubscriptions(c *gin.Context) {
	var eeSubscription models.EeSubscription
	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&eeSubscription, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, eeSubscription)
	req.Params["ueGroupId"] = c.Params.ByName("ueGroupId")

	rsp := producer.HandleCreateEeGroupSubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQueryEeGroupSubscriptions - Retrieves the ee subscriptions of a group of UEs or any UE
func HTTPQueryEeGroupSubscriptions(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueGroupId"] = c.Params.ByName("ueGroupId")

	rsp := producer.HandleQueryEeGroupSubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPCreateEeSubscriptions - Create individual EE subscription
func HTTPCreateEeSubscriptions(c *gin.Context) {
	var eeSubscription models.EeSubscription

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&eeSubscription, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, eeSubscription)
	req.Params["ueGroupId"] = c.Params.ByName("ueGroupId")

	rsp := producer.HandleCreateEeSubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPQueryeesubscriptions - Retrieves the ee subscriptions of a UE
func HTTPQueryeesubscriptions(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueGroupId"] = c.Params.ByName("ueGroupId")

	rsp := producer.HandleQueryeesubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPRemoveeeSubscriptions - Deletes a eeSubscription
func HTTPRemoveeeSubscriptions(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandleRemoveeeSubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPUpdateEesubscriptions - Stores an individual ee subscriptions of a UE
func HTTPUpdateEesubscriptions(c *gin.Context) {
	var eeSubscription models.EeSubscription

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&eeSubscription, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, eeSubscription)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandleUpdateEesubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPRemoveEeGroupSubscriptions - Deletes a eeSubscription for a group of UEs or any UE
func HTTPRemoveEeGroupSubscriptions(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueGroupId"] = c.Params.ByName("ueGroupId")
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandleRemoveEeGroupSubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPUpdateEeGroupSubscriptions - Stores an individual ee subscription of a group of UEs or any UE
func HTTPUpdateEeGroupSubscriptions(c *gin.Context) {
	var eeSubscription models.EeSubscription

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&eeSubscription, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, eeSubscription)
	req.Params["ueGroupId"] = c.Params.ByName("ueGroupId")
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandleUpdateEeGroupSubscriptions(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPCreateSessionManagementData - Creates and updates the session
// management data for a UE and for an individual PDU session
func HTTPCreateSessionManagementData(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPDeleteSessionManagementData - Deletes the session management
// data for a UE and for an individual PDU session
func HTTPDeleteSessionManagementData(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPQuerySessionManagementData - Retrieves the session management
// data for a UE and for an individual PDU session
func HTTPQuerySessionManagementData(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CreateAccessAndMobilityData - Creates and updates the access and mobility exposure data for a UE
func CreateAccessAndMobilityData(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// DeleteAccessAndMobilityData - Deletes the access and mobility exposure data for a UE
func DeleteAccessAndMobilityData(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// QueryAccessAndMobilityData - Retrieves the access and mobility exposure data for a UE
func QueryAccessAndMobilityData(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPApplicationDataInfluenceDataSubsToNotifyGet -
func HTTPApplicationDataInfluenceDataSubsToNotifyGet(c *gin.Context) {
	// New HTTP request
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Query["dnn"] = c.QueryArray("dnn")
	req.Query["snssai"] = c.QueryArray("snssai")
	req.Query["internal-Group-Id"] = c.QueryArray("internal-Group-Id")
	req.Query["supi"] = c.QueryArray("supi")

	// Handle request
	rsp := producer.HandleApplicationDataInfluenceDataSubsToNotifyGet(req)

	// Serialize response body
	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPApplicationDataInfluenceDataSubsToNotifyPost -
func HTTPApplicationDataInfluenceDataSubsToNotifyPost(c *gin.Context) {
	// Get HTTP request body
	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	// Deserialize request body
	var trafficInfluSub models.TrafficInfluSub
	err = openapi.Deserialize(&trafficInfluSub, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	// New HTTP request
	req := httpwrapper.NewRequest(c.Request, trafficInfluSub)

	// Handle request
	rsp := producer.HandleApplicationDataInfluenceDataSubsToNotifyPost(req)

	// Serialize response body
	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		// Get the first value associated with `Location` key in the header
		c.Header("Location", rsp.Header.Get("Location"))
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPApplicationDataInfluenceDataInfluenceIdDelete - Delete an individual Influence Data resource
func HTTPApplicationDataInfluenceDataInfluenceIdDelete(c *gin.Context) {
	// New HTTP request
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["influenceId"] = c.Params.ByName("influenceId")

	// Handle request
	rsp := producer.HandleApplicationDataInfluenceDataInfluenceIdDelete(req)

	if rsp.Body != nil {
		// Serialize response body
		responseBody, err := openapi.Serialize(rsp.Body, "application/json")
		if err != nil {
			logger.DataRepoLog.Errorln(err)
			problemDetails := models.ProblemDetails{
				Status: http.StatusInternalServerError,
				Cause:  "SYSTEM_FAILURE",
				Detail: err.Error(),
			}
			c.JSON(http.StatusInternalServerError, problemDetails)
		} else {
			c.Data(rsp.Status, "application/json", responseBody)
		}
	} else {
		c.Data(rsp.Status, "", nil)
	}
}

// HTTPApplicationDataInfluenceDataInfluenceIdPatch -
// Modify part of the properties of an individual Influence Data resource
func HTTPApplicationDataInfluenceDataInfluenceIdPatch(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPApplicationDataInfluenceDataInfluenceIdPut - Create or update an individual Influence Data resource
func HTTPApplicationDataInfluenceDataInfluenceIdPut(c *gin.Context) {
	// Get HTTP request body
	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	// Deserialize request body
	var trafficInfluData models.TrafficInfluData
	err = openapi.Deserialize(&trafficInfluData, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	// New HTTP request
	req := httpwrapper.NewRequest(c.Request, trafficInfluData)
	req.Params["influenceId"] = c.Params.ByName("influenceId")

	// Handle request
	rsp := producer.HandleApplicationDataInfluenceDataInfluenceIdPut(req)

	// Serialize response body
	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		// Get the first value associated with `Location` key in the header
		c.Header("Location", rsp.Header.Get("Location"))
		c.Data(rsp.Status, "application/json", responseBody)
	}
}
