/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package processor

import (
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"

	"github.com/free5gc/udr/internal/logger"
	datarepository "github.com/free5gc/udr/internal/sbi/datarepository"
)

// HTTPApplicationDataInfluenceDataGet -
func (p *Processor) HandleApplicationDataInfluenceDataGet(c *gin.Context) {

	var filter []bson.M
	logger.DataRepoLog.Infof("Handle ApplicationDataInfluenceDataGet")
	collName := "applicationData.influenceData"
	
	influenceIdsParam := c.QueryArray("influence-Ids")
	dnnsParam := c.QueryArray("dnns")
	internalGroupIdsParam := c.QueryArray("internal-Group-Id")
	supisParam := c.QueryArray("supis")
	snssaisParam := c.QueryArray("snssais")
	if len(influenceIdsParam) != 0 {
		influenceIds := strings.Split(influenceIdsParam[0], ",")
		filter = append(filter, bson.M{"influenceId": bson.M{"$in": influenceIds}})
	}
	if len(dnnsParam) != 0 {
		dnns := strings.Split(dnnsParam[0], ",")
		filter = append(filter, bson.M{"dnn": bson.M{"$in": dnns}})
	}
	if len(internalGroupIdsParam) != 0 {
		internalGroupIds := strings.Split(internalGroupIdsParam[0], ",")
		withAnyUeIndFilter := []bson.M{
			{
				"interGroupId": bson.M{"$in": internalGroupIds},
			},
			{
				"interGroupId": "AnyUE",
			},
		}
		filter = append(filter, bson.M{"$or": withAnyUeIndFilter})
	} else if len(supisParam) != 0 {
		supis := strings.Split(supisParam[0], ",")
		withAnyUeIndFilter := []bson.M{
			{
				"supi": bson.M{"$in": supis},
			},
			{
				"interGroupId": "AnyUE",
			},
		}
		filter = append(filter, bson.M{"$or": withAnyUeIndFilter})
	}
	if len(snssaisParam) != 0 {
		snssais := datarepository.ParseSnssaisFromQueryParam(snssaisParam[0])
		// NOTE: The following code would have bugs with several tries that return null value from Mongo DB, while most of
		//       tries would be correct. The errors seem to occur only when the receiving filters on Mongo DB have reverse
		//       orders of snssai fields, i.e. first sd then sst, even though bson.M{} is used
		// matchList := buildSnssaiMatchList(snssais)
		// filter = append(filter, bson.M{"snssai": bson.M{"$in": matchList}})
		matchList := datarepository.BuildSnssaiMatchList(snssais)
		filter = append(filter, bson.M{"$or": matchList})
	}
	influenceDataArray := datarepository.ApplicationDataInfluenceDataGetProcedure(collName, filter)
	c.JSON(http.StatusOK, influenceDataArray)
}
