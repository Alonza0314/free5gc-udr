/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package processor

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/openapi"
	"github.com/free5gc/openapi/models"
	"github.com/free5gc/udr/internal/logger"
	datarepository "github.com/free5gc/udr/internal/sbi/datarepository"
	"github.com/free5gc/udr/internal/util"
)

// HTTPCreateSmfContextNon3gpp - To create an individual SMF context data of a UE in the UDR
func (p *Processor) HandleCreateSmfContextNon3gpp(c *gin.Context) {
	var smfRegistration models.SmfRegistration

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&smfRegistration, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}


	logger.DataRepoLog.Infof("Handle CreateSmfContextNon3gpp")

	collName := "subscriptionData.contextData.smfRegistrations"
	ueId := c.Params.ByName("ueId")
	pduSessionId, err := strconv.ParseInt(c.Param("pduSessionId"), 10, 64)
	if err != nil {
		logger.DataRepoLog.Warnln(err)
	}

	putData, status := datarepository.CreateSmfContextNon3gppProcedure(smfRegistration, collName, ueId, pduSessionId)

	if status == http.StatusCreated {
		c.JSON(http.StatusCreated, putData)
	} else if status == http.StatusOK {
		c.JSON(http.StatusOK, putData)
	} else {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
	}
}

// HTTPDeleteSmfContext - To remove an individual SMF context data of a UE the UDR
func (p *Processor) HandleDeleteSmfContext(c *gin.Context) {
	logger.DataRepoLog.Infof("Handle DeleteSmfContext")

	collName := "subscriptionData.contextData.smfRegistrations"
	ueId := c.Params.ByName("ueId")
	pduSessionId := c.Params.ByName("pduSessionId")

	datarepository.DeleteSmfContextProcedure(collName, ueId, pduSessionId)
	c.Status(http.StatusNoContent)
}

// HTTPQuerySmfRegistration - Retrieves the individual SMF registration of a UE
func (p *Processor) HandleQuerySmfRegistration(c *gin.Context) {
	logger.DataRepoLog.Infof("Handle QuerySmfRegistration")

	ueId := c.Params.ByName("ueId")
	pduSessionId := c.Params.ByName("pduSessionId")
	collName := "subscriptionData.contextData.smfRegistrations"

	data, problemDetails := datarepository.QuerySmfRegistrationProcedure(collName, ueId, pduSessionId)
	
	if data == nil && problemDetails == nil {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
	}
	c.JSON(http.StatusOK, data)

}
