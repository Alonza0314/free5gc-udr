/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package processor

import (
	"net/http"
	"fmt"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/openapi"
	"github.com/free5gc/openapi/models"
	"github.com/free5gc/udr/internal/logger"
	datarepository "github.com/free5gc/udr/internal/sbi/datarepository"
	udr_context "github.com/free5gc/udr/internal/context"
)

// HTTPApplicationDataInfluenceDataSubsToNotifyGet -
func (p *Processor) HandleApplicationDataInfluenceDataSubsToNotifyGet(c *gin.Context) {
	logger.DataRepoLog.Infof("Handle ApplicationDataInfluenceDataSubsToNotifyGet")

	dnn := c.Query("dnn")
	internalGroupId := c.Query("internal-Group-Id")
	supi := c.Query("supi")

	var snssai *models.Snssai
	if c.Query("snssai") != "" {
		snssai = new(models.Snssai)
		err := openapi.Deserialize(snssai, []byte(c.Query("snssai")), "application/json")
		if err != nil {
			problemDetails := models.ProblemDetails{
				Status: http.StatusBadRequest,
				Detail: err.Error(),
			}
			c.JSON(http.StatusBadRequest, problemDetails)
		}
	}

	if dnn == "" && snssai == nil && internalGroupId == "" && supi == "" {
		problemDetails := models.ProblemDetails{
			Status: http.StatusBadRequest,
			Detail: "At least one of DNNs, S-NSSAIs, Internal Group IDs or SUPIs shall be provided",
		}
		c.JSON(http.StatusBadRequest, problemDetails)
	}

	rspData, problemDetails := datarepository.ApplicationDataInfluenceDataSubsToNotifyGetProcedure(dnn, snssai, internalGroupId, supi)

	if rspData == nil && problemDetails != nil {
		c.JSON(http.StatusInternalServerError, problemDetails)
		return
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.JSON(http.StatusOK, rspData)
}

// HTTPApplicationDataInfluenceDataSubsToNotifyPost -
func (p *Processor) HandleApplicationDataInfluenceDataSubsToNotifyPost(c *gin.Context) {
	// Get HTTP request body
	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	// Deserialize request body
	var trafficInfluSub models.TrafficInfluSub
	err = openapi.Deserialize(&trafficInfluSub, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}
	logger.DataRepoLog.Infof("Handle ApplicationDataInfluenceDataSubsToNotifyPost")
	subscriptionId := udr_context.NewInfluenceDataSubscriptionId()

	rspData, problemDetails := datarepository.ApplicationDataInfluenceDataSubsToNotifySubscriptionIdPutProcedure(subscriptionId, &trafficInfluSub)

	if rspData != nil {
		header := http.Header{
			"Location": {
				fmt.Sprintf("%s/application-data/influenceData/subs-to-notify/%s",
					udr_context.GetSelf().GetIPv4GroupUri(udr_context.NUDR_DR), subscriptionId),
			},
		}
		c.Header("Location", header.Get("Location"))
		c.JSON(http.StatusCreated, rspData)
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
	}

	problemDetails = &models.ProblemDetails{
		Status: http.StatusForbidden,
		Cause:  "UNSPECIFIED",
	}
	c.JSON(http.StatusForbidden, problemDetails)
}
