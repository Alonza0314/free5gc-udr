/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package processor

import (
	"net/http"
	"encoding/json"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/openapi"
	"github.com/free5gc/openapi/models"
	"github.com/free5gc/udr/internal/logger"
	datarepository "github.com/free5gc/udr/internal/sbi/datarepository"
	"github.com/free5gc/udr/internal/util"
	"github.com/free5gc/util/httpwrapper"
)

func sendResponse(c *gin.Context, rsp *httpwrapper.Response) {
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		pd := openapi.ProblemDetailsSystemFailure(err.Error())
		c.JSON(http.StatusInternalServerError, pd)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

func getDataFromRequestBody(c *gin.Context, data interface{}) error {
	reqBody, err := c.GetRawData()
	if err != nil {
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		pd := openapi.ProblemDetailsSystemFailure(err.Error())
		c.JSON(http.StatusInternalServerError, pd)
		return err
	}

	err = openapi.Deserialize(data, reqBody, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Deserialize Request Body error: %+v", err)
		pd := util.ProblemDetailsMalformedReqSyntax(err.Error())
		c.JSON(http.StatusBadRequest, pd)
		return err
	}
	return err
}

// HTTPApplicationDataPfdsAppIdDelete -
func (p *Processor) HandleApplicationDataPfdsAppIdDelete(c *gin.Context) {
	appID := c.Params.ByName("appId")
	logger.DataRepoLog.Infof("Handle ApplicationDataPfdsAppIdDelete: appID=%q", appID)

	datarepository.DeleteApplicationDataIndividualPfdFromDB(appID)

	c.Status(http.StatusNoContent)
}

// HTTPApplicationDataPfdsAppIdGet -
func (p *Processor) HandleApplicationDataPfdsAppIdGet(c *gin.Context) {
	appID := c.Params.ByName("appId")
	logger.DataRepoLog.Infof("Handle ApplicationDataPfdsAppIdGet: appID=%q", appID)

	data, problemDetails := datarepository.GetApplicationDataIndividualPfdFromDB(appID)

	if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.JSON(http.StatusOK, data)
}

// HTTPApplicationDataPfdsAppIdPut -
func(p *Processor) HandleApplicationDataPfdsAppIdPut(c *gin.Context) {
	var pfdDataforApp models.PfdDataForApp

	if err := getDataFromRequestBody(c, &pfdDataforApp); err != nil {
		return
	}

	appID := c.Params.ByName("appId")
	logger.DataRepoLog.Infof("Handle ApplicationDataPfdsAppIdPut: appID=%q", appID)

	data, status := datarepository.PutApplicationDataIndividualPfdToDB(appID, &pfdDataforApp)

	c.JSON(status, data)
}

// HTTPApplicationDataPfdsGet -
func (p *Processor) HandleApplicationDataPfdsGet(c *gin.Context) {
	query := c.Request.URL.Query()
	pfdsAppIDs := query["appId"]
	logger.DataRepoLog.Infof("Handle ApplicationDataPfdsGet: pfdsAppIDs=%#v", pfdsAppIDs)

	// TODO: Parse appID with separator ','
	// Ex: "app1,app2,..."
	matchedPfds := datarepository.GetApplicationDataPfdsFromDB(pfdsAppIDs)

	c.JSON(http.StatusOK, matchedPfds)
}

// HTTPExposureDataSubsToNotifyPost -
func (p *Processor) HandleExposureDataSubsToNotifyPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPExposureDataSubsToNotifySubIdDelete - Deletes a subcription for notifications
func (p *Processor) HandleExposureDataSubsToNotifySubIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPExposureDataSubsToNotifySubIdPut - updates a subcription for notifications
func (p *Processor) HandleExposureDataSubsToNotifySubIdPut(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPPolicyDataBdtDataBdtReferenceIdDelete -
func (p *Processor) HandlePolicyDataBdtDataBdtReferenceIdDelete(c *gin.Context) {
	logger.DataRepoLog.Infof("Handle PolicyDataBdtDataBdtReferenceIdDelete")

	collName := "policyData.bdtData"
	bdtReferenceId := c.Params.ByName("bdtReferenceId")

	datarepository.PolicyDataBdtDataBdtReferenceIdDeleteProcedure(collName, bdtReferenceId)
	c.Status(http.StatusNoContent)
}

// HTTPPolicyDataBdtDataBdtReferenceIdGet -
func (p *Processor) HandlePolicyDataBdtDataBdtReferenceIdGet(c *gin.Context) {
	logger.DataRepoLog.Infof("Handle PolicyDataBdtDataBdtReferenceIdGet")

	collName := "policyData.bdtData"
	bdtReferenceId := c.Params.ByName("bdtReferenceId")

	data, problemDetails := datarepository.PolicyDataBdtDataBdtReferenceIdGetProcedure(collName, bdtReferenceId)
	if data == nil && problemDetails == nil {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
		return
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.JSON(http.StatusOK, data)
}

// HTTPPolicyDataBdtDataBdtReferenceIdPut -
func (p *Processor) HandlePolicyDataBdtDataBdtReferenceIdPut(c *gin.Context) {
	var bdtData models.BdtData

	if err := getDataFromRequestBody(c, &bdtData); err != nil {
		return
	}
	logger.DataRepoLog.Infof("Handle PolicyDataBdtDataBdtReferenceIdPut")

	collName := "policyData.bdtData"
	bdtReferenceId := c.Params.ByName("bdtReferenceId")

	putData := datarepository.PolicyDataBdtDataBdtReferenceIdPutProcedure(collName, bdtReferenceId, bdtData)
	
	if putData == nil {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
		return
	}
	c.JSON(http.StatusOK, putData)
}

// HTTPPolicyDataBdtDataGet -
func (p *Processor) HandlePolicyDataBdtDataGet(c *gin.Context) {
	logger.DataRepoLog.Infof("Handle PolicyDataBdtDataGet")

	collName := "policyData.bdtData"

	bdtDataArray := datarepository.PolicyDataBdtDataGetProcedure(collName)
	c.JSON(http.StatusOK, bdtDataArray)
}

// HTTPPolicyDataPlmnsPlmnIdUePolicySetGet -
func (p *Processor) HandlePolicyDataPlmnsPlmnIdUePolicySetGet(c *gin.Context) {
	logger.DataRepoLog.Infof("Handle PolicyDataPlmnsPlmnIdUePolicySetGet")

	collName := "policyData.plmns.uePolicySet"
	plmnId := c.Params.ByName("plmnId")

	data, problemDetails := datarepository.PolicyDataPlmnsPlmnIdUePolicySetGetProcedure(collName, plmnId)

	if data == nil && problemDetails == nil {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
		return
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.JSON(http.StatusOK, data)
}

// HTTPPolicyDataSponsorConnectivityDataSponsorIdGet -
func (p *Processor) HandlePolicyDataSponsorConnectivityDataSponsorIdGet(c *gin.Context) {
	logger.DataRepoLog.Infof("Handle PolicyDataSponsorConnectivityDataSponsorIdGet")

	collName := "policyData.sponsorConnectivityData"
	sponsorId := c.Params.ByName("sponsorId")

	data, status := datarepository.PolicyDataSponsorConnectivityDataSponsorIdGetProcedure(collName, sponsorId)

	if data == nil {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
		return
	} else if status == http.StatusOK {
		c.JSON(http.StatusOK, data)
		return
	} else if status == http.StatusNoContent {
		c.JSON(http.StatusNoContent, nil)
		return
	} 
}

// HTTPPolicyDataSubsToNotifyPost -
func (p *Processor) HandlePolicyDataSubsToNotifyPost(c *gin.Context) {
	var policyDataSubscription models.PolicyDataSubscription

	if err := getDataFromRequestBody(c, &policyDataSubscription); err != nil {
		return
	}

	logger.DataRepoLog.Infof("Handle PolicyDataSubsToNotifyPost")

	locationHeader := datarepository.PolicyDataSubsToNotifyPostProcedure(policyDataSubscription)
	c.Header("Location", locationHeader)
	c.JSON(http.StatusCreated, policyDataSubscription)
}

// HTTPPolicyDataSubsToNotifySubsIdDelete -
func (p *Processor) HandlePolicyDataSubsToNotifySubsIdDelete(c *gin.Context) {
	subsId :=  c.Params.ByName("subsId")

	problemDetails := datarepository.PolicyDataSubsToNotifySubsIdDeleteProcedure(subsId)

	if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.Status(http.StatusNoContent)
}

// HTTPPolicyDataSubsToNotifySubsIdPut -
func (p *Processor) HandlePolicyDataSubsToNotifySubsIdPut(c *gin.Context) {
	var policyDataSubscription models.PolicyDataSubscription

	if err := getDataFromRequestBody(c, &policyDataSubscription); err != nil {
		return
	}

	logger.DataRepoLog.Infof("Handle PolicyDataSubsToNotifySubsIdPut")

	subsId := c.Params.ByName("subsId")

	data, problemDetails := datarepository.PolicyDataSubsToNotifySubsIdPutProcedure(subsId, policyDataSubscription)

	if problemDetails == nil && data == nil {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
		return
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.JSON(http.StatusOK, policyDataSubscription)
}

// HTTPPolicyDataUesUeIdAmDataGet -
func (p *Processor) HandlePolicyDataUesUeIdAmDataGet(c *gin.Context) {
	logger.DataRepoLog.Infof("Handle PolicyDataUesUeIdAmDataGet")

	collName := "policyData.ues.amData"
	ueId := c.Params.ByName("ueId")
	data, problemDetails := datarepository.PolicyDataUesUeIdAmDataGetProcedure(collName, ueId)

	if data == nil && problemDetails == nil {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
		return
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.JSON(http.StatusOK, data)
}

// HTTPPolicyDataUesUeIdOperatorSpecificDataGet -
func (p *Processor) HandlePolicyDataUesUeIdOperatorSpecificDataGet(c *gin.Context) {

	collName := "policyData.ues.operatorSpecificData"
	ueId := c.Params.ByName("ueId")
	operatorSpecificDataContainerMap, problemDetails := datarepository.PolicyDataUesUeIdOperatorSpecificDataGetProcedure(collName, ueId)

	if operatorSpecificDataContainerMap == nil && problemDetails == nil {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
		return
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.JSON(http.StatusOK, operatorSpecificDataContainerMap)

}

// HTTPPolicyDataUesUeIdOperatorSpecificDataPatch - Need to be fixed
func (p *Processor) HandlePolicyDataUesUeIdOperatorSpecificDataPatch(c *gin.Context) {
	var patchItemArray []models.PatchItem

	if err := getDataFromRequestBody(c, &patchItemArray); err != nil {
		return
	}

	collName := "policyData.ues.operatorSpecificData"
	ueId := c.Params.ByName("ueId")

	problemDetails := datarepository.PolicyDataUesUeIdOperatorSpecificDataPatchProcedure(collName, ueId, patchItemArray)

	if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.Status(http.StatusNoContent)
}

// HTTPPolicyDataUesUeIdOperatorSpecificDataPut -
func (p *Processor) HandlePolicyDataUesUeIdOperatorSpecificDataPut(c *gin.Context) {
	var operatorSpecificDataContainerMap map[string]models.OperatorSpecificDataContainer

	if err := getDataFromRequestBody(c, &operatorSpecificDataContainerMap); err != nil {
		return
	}

	collName := "policyData.ues.operatorSpecificData"
	ueId :=  c.Params.ByName("ueId")

	datarepository.PolicyDataUesUeIdOperatorSpecificDataPutProcedure(collName, ueId,  operatorSpecificDataContainerMap)

	c.Status(http.StatusOK)
}

// HTTPPolicyDataUesUeIdSmDataGet -
func (p *Processor) HandlePolicyDataUesUeIdSmDataGet(c *gin.Context) {
	logger.DataRepoLog.Infof("Handle PolicyDataUesUeIdSmDataGet")

	collName := "policyData.ues.smData"
	ueId := c.Params.ByName("ueId")
	sNssai := models.Snssai{}
	sNssaiQuery := c.Request.URL.Query().Get("snssai")
	dnn := c.Request.URL.Query().Get("dnn")

	err := json.Unmarshal([]byte(sNssaiQuery), &sNssai)
	if err != nil {
		logger.DataRepoLog.Warnln(err)
	}
	smPolicyDataResp, problemDetails := datarepository.PolicyDataUesUeIdSmDataGetProcedure(collName, ueId, sNssai, dnn)
	
	if smPolicyDataResp == nil && problemDetails == nil {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
		return
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.JSON(http.StatusOK, smPolicyDataResp)
}

// HTTPPolicyDataUesUeIdSmDataPatch - Need to be fixed
func (p *Processor) HandlePolicyDataUesUeIdSmDataPatch(c *gin.Context) {
	var usageMonDataMap map[string]models.UsageMonData

	if err := getDataFromRequestBody(c, &usageMonDataMap); err != nil {
		return
	}
	logger.DataRepoLog.Infof("Handle PolicyDataUesUeIdSmDataPatch")

	collName := "policyData.ues.smData.usageMonData"
	ueId := c.Params.ByName("ueId")

	problemDetails := datarepository.PolicyDataUesUeIdSmDataPatchProcedure(collName, ueId, usageMonDataMap)
	if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.Status(http.StatusNoContent)
}

// HTTPPolicyDataUesUeIdSmDataUsageMonIdDelete -
func (p *Processor) HandlePolicyDataUesUeIdSmDataUsageMonIdDelete(c *gin.Context) {
	ueId := c.Params.ByName("ueId")
	usageMonId := c.Params.ByName("usageMonId")
	collName := "policyData.ues.smData.usageMonData"
	datarepository.PolicyDataUesUeIdSmDataUsageMonIdDeleteProcedure(collName, ueId, usageMonId)

	c.Status(http.StatusNoContent)
}

// HTTPPolicyDataUesUeIdSmDataUsageMonIdGet -
func (p *Processor) HandlePolicyDataUesUeIdSmDataUsageMonIdGet(c *gin.Context) {
	collName := "policyData.ues.smData.usageMonData"
	ueId := c.Params.ByName("ueId")
	usageMonId := c.Params.ByName("usageMonId")

	data := datarepository.PolicyDataUesUeIdSmDataUsageMonIdGetProcedure(collName, usageMonId, ueId)

	if data == nil {
		c.Status(http.StatusNoContent)
		return
	}
	c.JSON(http.StatusOK, data)
}

// HTTPPolicyDataUesUeIdSmDataUsageMonIdPut -
func (p *Processor) HandlePolicyDataUesUeIdSmDataUsageMonIdPut(c *gin.Context) {
	var usageMonData models.UsageMonData

	if err := getDataFromRequestBody(c, &usageMonData); err != nil {
		return
	}
	ueId := c.Params.ByName("ueId")
	usageMonId := c.Params.ByName("usageMonId")
	collName := "policyData.ues.smData.usageMonData"

	putData := datarepository.PolicyDataUesUeIdSmDataUsageMonIdPutProcedure(collName, ueId, usageMonId, usageMonData)

	c.JSON(http.StatusCreated, putData)
}

// HTTPPolicyDataUesUeIdUePolicySetGet -
func (p *Processor) HandlePolicyDataUesUeIdUePolicySetGet(c *gin.Context) {

	ueId := c.Params.ByName("ueId")
	collName := "policyData.ues.uePolicySet"

	data, problemDetails := datarepository.PolicyDataUesUeIdUePolicySetGetProcedure(collName, ueId)

	if data == nil && problemDetails == nil {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
		return
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.JSON(http.StatusOK, data)
}

// HTTPPolicyDataUesUeIdUePolicySetPatch -
func (p *Processor) HandlePolicyDataUesUeIdUePolicySetPatch(c *gin.Context) {
	var uePolicySet models.UePolicySet

	if err := getDataFromRequestBody(c, &uePolicySet); err != nil {
		return
	}

	collName := "policyData.ues.uePolicySet"
	ueId := c.Params.ByName("ueId")
	problemDetails := datarepository.PolicyDataUesUeIdUePolicySetPatchProcedure(collName, ueId, uePolicySet)

	if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.Status(http.StatusNoContent)
}

// HTTPPolicyDataUesUeIdUePolicySetPut -
func (p *Processor) HandlePolicyDataUesUeIdUePolicySetPut(c *gin.Context) {
	var uePolicySet models.UePolicySet

	if err := getDataFromRequestBody(c, &uePolicySet); err != nil {
		return
	}

	collName := "policyData.ues.uePolicySet"
	ueId := c.Params.ByName("ueId")
	putData, status := datarepository.PolicyDataUesUeIdUePolicySetPutProcedure(collName, ueId, uePolicySet)

	if status == http.StatusNoContent {
		c.Status(http.StatusNoContent)
		return
	} else if status == http.StatusCreated {
		c.JSON(http.StatusCreated, putData)
		return
	} else if putData == nil {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
		return
	}
}
