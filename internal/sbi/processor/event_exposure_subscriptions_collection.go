/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package processor

import (
	"net/http"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/openapi"
	"github.com/free5gc/openapi/models"
	"github.com/free5gc/udr/internal/logger"
	datarepository "github.com/free5gc/udr/internal/sbi/datarepository"
	"github.com/free5gc/udr/internal/util"
)

// HTTPCreateEeSubscriptions - Create individual EE subscription
func (p *Processor) HandleCreateEeSubscriptions(c *gin.Context) {
	var eeSubscription models.EeSubscription

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&eeSubscription, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	logger.DataRepoLog.Infof("Handle CreateEeSubscriptions")

	ueId := c.Params.ByName("ueGroupId")

	locationHeader := datarepository.CreateEeSubscriptionsProcedure(ueId, eeSubscription)
	c.Header("Location", locationHeader)
	
	c.JSON(http.StatusCreated, eeSubscription)
}

// HTTPQueryeesubscriptions - Retrieves the ee subscriptions of a UE
func (p *Processor) HandleQueryeesubscriptions(c *gin.Context) {
	logger.DataRepoLog.Infof("Handle Queryeesubscriptions")
	ueID := c.Params.ByName("ueGroupId")
	eeSubscriptionSlice, problemDetails := datarepository.QueryeesubscriptionsProcedure(ueID)

	if eeSubscriptionSlice == nil && problemDetails == nil {
		pd := util.ProblemDetailsUpspecified("")
		c.JSON(int(pd.Status), pd)
		return
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	c.JSON(http.StatusOK, eeSubscriptionSlice)

}
